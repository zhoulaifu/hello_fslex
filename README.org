The repo consists in a .NET Core project. It is a minimal work example
for a lexer specification in fslex. I use dotnet to
automate the build process.


* Files

- hello_fslex.fsl: the lexer spec
- hello_fslex.fsproj: the project file of the .Net Core project


* Prerequisite

- dotnet
- fslexyacc (installed via nuget)




* How to generate the lexer from the command line

- dotnet build

It is likely that you need to adjust the project file to your system.


* What happens in the lexer
The lexer accepts from stdin a single digit, say 9, and transforms it
to a string "the lexer recognizes 9".  The variable "lexbuf" denotes a
global instance of "LexBuffer" Tokenize is a function that maps from
"LexBuffer" to a result type of Tokenize, here, string (which is the
type of the result of the lexer's actions).

 In general, if you need to transform a piece of text to something,
you need to first transform it to LexBuffer (here, we use
LexBuffer<char>.FromString to do it) so that the lexer can handle it
with its "Tokenize" function. Then, you use Tokenize to transform that
LexBuffer to your stuff, e.g. another string.


* How to run the lexer from the command line

- dotnet run

The step subsumes the previous one. It also runs the generated lexer,
which takes a single digit from stdin and outputs it to stdout.

Tested on an Mac OS.

* How to do the above from Visual Studio

- clone this repo

- create a new solution on VS, from 'Web and Console'. A default hello
  world project will be created.

- add this repo as an additional project of the solution

- select this project to run or compile (or otherwise, it will be the helloworld that will be worked on )


Tested on Visual Studio Community version for Mac.

* How to do it iteractively

- use "fsharpi -r FsLexYacc.Runtile.dll fslex.fs" where the DLL file should be the path of your actual one.

Tested on Mac.
